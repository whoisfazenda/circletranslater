import telebot
from telebot import types
from vosk import Model, KaldiRecognizer
import wave
from pydub import AudioSegment
import subprocess
import requests
from googletrans import Translator  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º googletrans
import ffmpeg
import os
import logging
import time  # –ò–º–ø–æ—Ä—Ç time –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
from langdetect import detect, DetectorFactory
from langdetect.lang_detect_exception import LangDetectException
import translate_audio_video  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
from moviepy import VideoFileClip, vfx  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º moviepy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
import fasttext  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fasttext –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞




# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ langdetect
DetectorFactory.seed = 0
from langdetect import detect_langs
detect_langs("test")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å fasttext –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
try:
    language_detector = fasttext.load_model("lid.176.bin")
    logging.info("–ú–æ–¥–µ–ª—å fasttext —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å fasttext: {e}. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª lid.176.bin –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    exit(1)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
bot = telebot.TeleBot("8041048168:AAE6Mi8o0bZppdsvGnQypykF0zXLtzduoJs")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Translate (googletrans)
translator = Translator()

# –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º Vosk
VOSK_MODEL_PATHS = {
    "ru": "vosk-model-small-ru-0.22",
    "en": "vosk-model-small-en-us-zamia-0.5",
    "uk": "vosk-model-small-uk-v3-nano"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Vosk
vosk_models = {}
for lang, path in VOSK_MODEL_PATHS.items():
    if not os.path.exists(path):
        logging.error(f"–ú–æ–¥–µ–ª—å Vosk –¥–ª—è —è–∑—ã–∫–∞ {lang} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {path}. –°–∫–∞—á–∞–π –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models")
        exit(1)
    vosk_models[lang] = Model(path)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
pending_actions = {}
processed_messages = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üé∂ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
    btn2 = types.KeyboardButton("üìπ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
    btn3 = types.KeyboardButton("üìπ‚û°Ô∏è‚≠ïÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫")
    btn4 = types.KeyboardButton("üëÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def safe_remove(file_path, retries=5, delay=1):
    for attempt in range(retries):
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logging.info(f"–§–∞–π–ª —É–¥–∞–ª—ë–Ω: {file_path}")
            return True
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}): {e}")
            time.sleep(delay)
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫: {file_path}")
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
        bot.reply_to(message, "üñê –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–≤–æ–π –∫—Ä—É–∂–æ—á–µ–∫ –Ω–∞ —Ä–æ–¥–Ω–æ–π —Ç–µ–±–µ —è–∑—ã–∫) \n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_audio(file_path, file_type="video"):
    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ {file_type}: {file_path}")
    try:
        audio = AudioSegment.from_file(file_path, format="mp4" if file_type == "video" else "ogg")
        audio = audio.set_channels(1).set_frame_rate(16000).set_sample_width(2)
        audio.export("original_audio.wav", format="wav")
        duration_ms = len(audio)
        return "original_audio.wav", duration_ms / 1000
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None, 0

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ fasttext
def recognize_speech(audio_path):
    logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞: {audio_path}")
    try:
        wf = wave.open(audio_path, "rb")
        if wf.getnchannels() != 1 or wf.getsampwidth() != 2 or wf.getframerate() != 16000:
            logging.error("–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å WAV, –º–æ–Ω–æ, 16-bit, 16000 Hz")
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ"

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞)
        text_for_detection = ""
        recognizer_temp = KaldiRecognizer(vosk_models["ru"], wf.getframerate())
        while True:
            data = wf.readframes(4000)
            if len(data) == 0:
                break
            if recognizer_temp.AcceptWaveform(data):
                result = recognizer_temp.Result()
                result_dict = eval(result.replace("true", "True").replace("false", "False"))
                text_for_detection += result_dict.get("text", "") + " "
        final_result = recognizer_temp.FinalResult()
        final_dict = eval(final_result.replace("true", "True").replace("false", "False"))
        text_for_detection += final_dict.get("text", "")
        text_for_detection = text_for_detection.strip()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é fasttext
        detected_lang = None
        if text_for_detection:
            predictions = language_detector.predict(text_for_detection.replace("\n", " "))
            detected_lang = predictions[0][0].replace("__label__", "")
            if detected_lang not in ["ru", "en", "uk"]:
                detected_lang = None
            logging.info(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —è–∑—ã–∫ (fasttext): {detected_lang}, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {predictions[1][0]}")
        else:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        languages = ["ru", "en", "uk"]
        if detected_lang:
            languages = [detected_lang] + [lang for lang in languages if lang != detected_lang]
        logging.info(f"–ü–æ—Ä—è–¥–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {languages}")

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
        for lang in languages:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ —è–∑—ã–∫–µ: {lang}")
            wf.rewind()
            recognizer = KaldiRecognizer(vosk_models[lang], wf.getframerate())
            recognizer.SetWords(True)

            text = ""
            while True:
                data = wf.readframes(4000)
                if len(data) == 0:
                    break
                if recognizer.AcceptWaveform(data):
                    result = recognizer.Result()
                    result_dict = eval(result.replace("true", "True").replace("false", "False"))
                    text += result_dict.get("text", "") + " "

            final_result = recognizer.FinalResult()
            final_dict = eval(final_result.replace("true", "True").replace("false", "False"))
            text += final_dict.get("text", "")
            text = text.strip()

            if text:
                logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Vosk, {lang}): {text}")
                return text

        logging.warning("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏"

# –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫ (—É–º–µ–Ω—å—à–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º subclip)
def convert_to_circle(video_path, output_path="circle_video.mp4"):
    logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫: {video_path}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        probe = ffmpeg.probe(video_path)
        video_stream = next(s for s in probe['streams'] if s['codec_type'] == 'video')
        width = int(video_stream['width'])
        height = int(video_stream['height'])
        duration = float(probe['format']['duration'])

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥
        duration = min(duration, 60)
        logging.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {duration} —Å–µ–∫")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        size = min(width, height)
        logging.info(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏: {size}x{size}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ
        has_audio = any(stream['codec_type'] == 'audio' for stream in probe['streams'])
        logging.info(f"–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫: {has_audio}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –æ–±—Ä–µ–∑–∫–∏, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        cmd = [
            "ffmpeg",
            "-i", video_path,
            "-t", str(duration),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            "-vf", f"crop={size}:{size}:{(width-size)/2}:{(height-size)/2},scale=384:384",  # –û–±—Ä–µ–∑–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            "-c:v", "libx264",  # –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
            "-b:v", "300k",  # –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
            "-r", "24",  # –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        ]

        if has_audio:
            cmd.extend([
                "-c:a", "aac",  # –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ
                "-b:a", "64k"  # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            ])
        else:
            cmd.append("-an")  # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

        cmd.extend([
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            output_path
        ])

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        logging.info(f"–ö—Ä—É–∂–æ—á–µ–∫ –≥–æ—Ç–æ–≤: {output_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(output_path) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        logging.info(f"–†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")
        if file_size > 10:
            logging.warning("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë, Telegram –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å video_note")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        probe_output = ffmpeg.probe(output_path)
        has_audio_output = any(stream['codec_type'] == 'audio' for stream in probe_output['streams'])
        logging.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫: {has_audio_output}")

        video_info_output = next(s for s in probe_output['streams'] if s['codec_type'] == 'video')
        logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: —Ä–∞–∑–º–µ—Ä={video_info_output['width']}x{video_info_output['height']}, –∫–æ–¥–µ–∫={video_info_output['codec_name']}, fps={video_info_output.get('r_frame_rate')}")

        return output_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫: {str(e)}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        user_id = message.chat.id
        text = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")

        if text == "üé∂ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ":
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ'")
            pending_actions[user_id] = {"type": "transcribe_audio"}
            bot.reply_to(message, "üó£ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")
        elif text == "üìπ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ":
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'")
            pending_actions[user_id] = {"type": "transcribe_video"}
            bot.reply_to(message, "üìπ –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")
        elif text == "üìπ‚û°Ô∏è‚≠ïÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫":
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫'")
            pending_actions[user_id] = {"type": "convert_to_circle"}
            bot.reply_to(message, "üìπ‚û°Ô∏è‚≠ïÔ∏è –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫.")
        elif text == "üëÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫":
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫'")
            pending_actions[user_id] = {"type": "translate_audio_video"}
            bot.reply_to(message, "üëÖ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        else:
            logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{text}'")
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        user_id = message.chat.id
        message_id = message.message_id
        if message_id in processed_messages:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        processed_messages.add(message_id)

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if user_id not in pending_actions:
            logging.warning(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
            return

        if pending_actions[user_id]["type"] == "transcribe_audio":
            transcribe_audio_handler(message)
        elif pending_actions[user_id]["type"] == "translate_audio_video":
            translate_audio_video.handle_voice(bot, message, extract_audio, recognize_speech, create_main_menu)
        else:
            logging.warning(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É–∂–æ—á–∫–æ–≤
@bot.message_handler(content_types=['video_note'])
def handle_video_note(message):
    try:
        user_id = message.chat.id
        message_id = message.message_id
        if message_id in processed_messages:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        processed_messages.add(message_id)

        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if user_id not in pending_actions:
            logging.warning(f"–ö—Ä—É–∂–æ—á–µ–∫ –æ—Ç {user_id} –Ω–µ –æ–∂–∏–¥–∞–ª—Å—è (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
            return

        if pending_actions[user_id]["type"] == "translate_audio_video":
            translate_audio_video.handle_video_note(bot, message, extract_audio, recognize_speech, create_main_menu)
        elif pending_actions[user_id]["type"] == "transcribe_video":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –∫–∞–∫ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            file_id = message.video_note.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            video_path = f"video_note_{user_id}.mp4"
            with open(video_path, "wb") as video_file:
                video_file.write(downloaded_file)

            audio_path, _ = extract_audio(video_path, file_type="video")
            if not audio_path:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –∫—Ä—É–∂–æ—á–∫–∞.", reply_markup=create_main_menu())
                return

            text = recognize_speech(audio_path)
            if "–û—à–∏–±–∫–∞" in text or "–ù–µ —É–¥–∞–ª–æ—Å—å" in text:
                bot.reply_to(message, text, reply_markup=create_main_menu())
            else:
                bot.reply_to(message, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}", reply_markup=create_main_menu())

            safe_remove(video_path)
            safe_remove(audio_path)
            if user_id in pending_actions:
                del pending_actions[user_id]
        else:
            logging.warning(f"–ö—Ä—É–∂–æ—á–µ–∫ –æ—Ç {user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_video_note: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@bot.message_handler(content_types=['video'])
def handle_video(message):
    try:
        user_id = message.chat.id
        message_id = message.message_id
        if message_id in processed_messages:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        processed_messages.add(message_id)

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if user_id not in pending_actions:
            logging.warning(f"–í–∏–¥–µ–æ –æ—Ç {user_id} –Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
            return

        if pending_actions[user_id]["type"] == "transcribe_video":
            transcribe_video_handler(message)
        elif pending_actions[user_id]["type"] == "convert_to_circle":
            convert_video_to_circle_handler(message)
        else:
            logging.warning(f"–í–∏–¥–µ–æ –æ—Ç {user_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (pending_actions: {pending_actions.get(user_id)})")
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_video: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
def transcribe_audio_handler(message):
    try:
        user_id = message.chat.id
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        voice_path = f"voice_{user_id}.ogg"
        with open(voice_path, "wb") as voice_file:
            voice_file.write(downloaded_file)

        audio_path, _ = extract_audio(voice_path, file_type="voice")
        if not audio_path:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=create_main_menu())
            return

        text = recognize_speech(audio_path)
        if "–û—à–∏–±–∫–∞" in text or "–ù–µ —É–¥–∞–ª–æ—Å—å" in text:
            bot.reply_to(message, text, reply_markup=create_main_menu())
        else:
            bot.reply_to(message, f"üì© –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}", reply_markup=create_main_menu())

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        safe_remove(voice_path)
        safe_remove(audio_path)
        if user_id in pending_actions:
            del pending_actions[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ transcribe_audio_handler: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
def transcribe_video_handler(message):
    try:
        user_id = message.chat.id
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ—á–µ–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        file_id = message.video.file_id if message.content_type == 'video' else message.video_note.file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        video_path = f"video_{user_id}.mp4"
        with open(video_path, "wb") as video_file:
            video_file.write(downloaded_file)

        audio_path, _ = extract_audio(video_path, file_type="video")
        if not audio_path:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.", reply_markup=create_main_menu())
            return

        text = recognize_speech(audio_path)
        if "–û—à–∏–±–∫–∞" in text or "–ù–µ —É–¥–∞–ª–æ—Å—å" in text:
            bot.reply_to(message, text, reply_markup=create_main_menu())
        else:
            bot.reply_to(message, f"üì© –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}", reply_markup=create_main_menu())

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        safe_remove(video_path)
        safe_remove(audio_path)
        if user_id in pending_actions:
            del pending_actions[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ transcribe_video_handler: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫
def convert_video_to_circle_handler(message):
    try:
        user_id = message.chat.id
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∫—Ä—É–∂–æ—á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        file_info = bot.get_file(message.video.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        video_path = f"video_{user_id}.mp4"
        with open(video_path, "wb") as video_file:
            video_file.write(downloaded_file)

        output_path = convert_to_circle(video_path)
        if output_path:
            with open(output_path, "rb") as video:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                sent_message = bot.send_video_note(user_id, video, reply_markup=create_main_menu())
                processed_messages.add(sent_message.message_id)  # –î–æ–±–∞–≤–ª—è–µ–º message_id –≤ processed_messages
            safe_remove(video_path)
            safe_remove(output_path)
        else:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫.", reply_markup=create_main_menu())

        if user_id in pending_actions:
            del pending_actions[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ convert_video_to_circle_handler: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–µ–∫.", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        translate_audio_video.callback_inline(bot, call, create_main_menu)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_inline: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
def run_bot():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ bot.polling, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥: {e}")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    run_bot()